{"version":3,"file":"WebRCAFetchComponent.esm.js","sources":["../../../src/components/WebRCAFetchComponent/WebRCAFetchComponent.tsx"],"sourcesContent":["import React from 'react';\nimport {\n  Table,\n  TableColumn,\n  Progress,\n  ResponseErrorPanel,\n} from '@backstage/core-components';\nimport useAsync from 'react-use/lib/useAsync';\nimport { useApi, configApiRef /*, identityApiRef*/ } from '@backstage/core-plugin-api';\nimport '@backstage/plugin-user-settings';\nimport { Typography } from '@material-ui/core';\nimport { InfoCard } from '@backstage/core-components';\nimport { useEntity } from '@backstage/plugin-catalog-react';\n\ninterface DenseTableProps {\n  incidents?: IncidentList;\n  web_rca_url?: string;\n  message?: string;\n}\n\ninterface Incident {\n  id?: string;\n  kind?: string;\n  href?: string;\n  incident_id?: string;\n  summary?: string;\n  description?: string;\n}\n// jq '{kind, page, size, total, items: [.items[] | {id, kind, href, incident_id, summary, description}]}'\ninterface IncidentList {\n  kind: 'IncidentList';\n  page?: number;\n  size?: number;\n  total?: number;\n  items?: Incident[];\n  errorMsg?: string;\n}\n\ninterface FetchProps {\n  product?: string;\n}\n\nexport const DenseTable = ({\n  incidents,\n  web_rca_url,\n  message,\n}: DenseTableProps) => {\n  if (message) {\n    return (\n      <InfoCard title=\"Web RCA Incidents\">\n        <Typography variant=\"body1\">{\"Error fetching incidents: \" + message }</Typography>\n      </InfoCard>\n    );\n  }\n\n  if (!incidents || !incidents.items || incidents.items.length === 0) {\n    return (\n      <InfoCard title=\"Web RCA Incidents\">\n        <Typography variant=\"body1\">\"Error fetching incidents: No Incidents\"</Typography>\n      </InfoCard>\n    );\n  }\n\n  if (!incidents || !incidents.items || incidents.items.length === 0) {\n    return (\n      <InfoCard title=\"Web RCA Incidents\">\n        <Typography variant=\"body1\">{\"Error fetching incidents: \" + message }</Typography>\n      </InfoCard>\n    );\n  }\n\n\n  const columns: TableColumn[] = [\n    { title: 'ID', field: 'incident_id' },\n    { title: 'Summary', field: 'summary' },\n    { title: 'Description', field: 'description' },\n  ];\n\n  const data = incidents.items.map(inc => {\n    return {\n      incident_id: (\n        <a\n          target=\"_blank\"\n          rel=\"noreferrer\"\n          href={`${web_rca_url}/incident/${inc.incident_id}/details`}\n        >\n          {inc.incident_id}\n        </a>\n      ),\n      summary: inc.summary,\n      description: inc.description,\n    };\n  });\n\n  return (\n    <Table\n      title=\"Web RCA Incidents\"\n      options={{ search: true, paging: true, pageSize: 10 }}\n      columns={columns}\n      data={data}\n    />\n  );\n};\n\nconst PRODUCT_LABEL_KEY = 'rhdh/web-rca/product-name';\n\nexport const WebRCAFetchComponent = ({ product }: FetchProps) => {\n  const config = useApi(configApiRef);\n  // const user = useApi(identityApiRef);\n  const entity = useEntity();\n\n  const { value, loading, error } = useAsync(async (): Promise<\n    IncidentList | string\n  > => {\n      // TODO: Should we limit to owner/mine?\n\n      console.log(\"SMR\");\n\n      let products = '';\n      if (product) {\n        products = product;\n      }\n      if (entity) {\n        // Default to entity name\n        products = entity.entity.metadata.name;\n\n        products = 'foo';\n\n        console.log(\"ENTITY: SMR\");\n        console.log(entity.entity.metadata.name);\n        console.log(entity.entity.spec);\n        console.log(entity.entity.metadata.labels);\n\n        // Overwrite name with system, if it exists\n        if (entity.entity.spec && entity.entity.spec.system && typeof(entity.entity.spec.system) === 'string') {\n          products = entity.entity.spec.system;\n        products = 'bar';\n        }\n\n        // Overwrite name with custom label, if it exists\n        if (entity.entity.metadata.labels) {\n          if (PRODUCT_LABEL_KEY in entity.entity.metadata.labels) {\n            products = entity.entity.metadata.labels[PRODUCT_LABEL_KEY];\n        products = 'baz';\n          }\n        }\n      }\n\n      if (products === '') {\n        return 'No product based on entity';\n      }\n\n\n      let incidentList = await fetch(\n        `${config.getString('backend.baseUrl')}/api/plugin-web-rca-backend/incidents`,\n        {\n          headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json',\n          },\n          method: 'POST',\n          body: JSON.stringify({products: products}),\n        },\n      ).catch(e => e)\n       .then(resp => resp.json());\n\n      return incidentList as Promise<IncidentList>;\n    }, []);\n\n  if (loading) {\n    return <Progress />;\n  }\n  if (error) {\n    return <ResponseErrorPanel error={error} />;\n  }\n  if (!value) {\n    return (\n      <ResponseErrorPanel\n        error={{\n          name: 'Foo',\n          message: 'Foo',\n        }}\n      />\n    );\n  }\n\n  if (typeof value === 'string') {\n    return (\n      <DenseTable\n        message={value}\n        web_rca_url={config.getString('ocm.webRcaUIUrl')}\n      />\n    );\n  }\n\n  return (\n    <DenseTable\n      incidents={value}\n      web_rca_url={config.getString('ocm.webRcaUIUrl')}\n    />\n  );\n};\n"],"names":[],"mappings":"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"}