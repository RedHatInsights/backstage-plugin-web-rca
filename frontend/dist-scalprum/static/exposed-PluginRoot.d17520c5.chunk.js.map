{"version":3,"file":"static/exposed-PluginRoot.d17520c5.chunk.js","mappings":"kNA0CO,MAAMA,EAAa,EACxBC,YACAC,cACAC,cAEA,GAAIA,EACF,OACE,SAACC,EAAAA,GAAQA,CAACC,MAAM,oB,UACd,SAACC,EAAAA,EAAUA,CAACC,QAAQ,Q,SAAS,6BAA+BJ,MAKlE,IAAKF,IAAcA,EAAUO,OAAoC,IAA3BP,EAAUO,MAAMC,OACpD,OACE,SAACL,EAAAA,GAAQA,CAACC,MAAM,oB,UACd,SAACC,EAAAA,EAAUA,CAACC,QAAQ,Q,SAAQ,+CAKlC,IAAKN,IAAcA,EAAUO,OAAoC,IAA3BP,EAAUO,MAAMC,OACpD,OACE,SAACL,EAAAA,GAAQA,CAACC,MAAM,oB,UACd,SAACC,EAAAA,EAAUA,CAACC,QAAQ,Q,SAAS,6BAA+BJ,MAMlE,MAMMO,EAAOT,EAAUO,MAAMG,KAAIC,IACxB,CACLC,aACE,SAACC,IAAAA,CACCC,OAAO,SACPC,IAAI,aACJC,KAAM,GAAGf,cAAwBU,EAAIC,sB,SAEpCD,EAAIC,cAGTK,QAASN,EAAIM,QACbC,YAAaP,EAAIO,gBAIrB,OACE,SAACC,EAAAA,GAAKA,CACJf,MAAM,oBACNgB,QAAS,CAAEC,QAAQ,EAAMC,QAAQ,EAAMC,SAAU,IACjDC,QA1B2B,CAC7B,CAAEpB,MAAO,KAAMqB,MAAO,eACtB,CAAErB,MAAO,UAAWqB,MAAO,WAC3B,CAAErB,MAAO,cAAeqB,MAAO,gBAwB7BhB,KAAMA,G,EAKNiB,EAAyB,uBAElBC,EAAuB,EAAGC,cACrC,MAAMC,GAASC,EAAAA,EAAAA,QAAOC,EAAAA,cAEhBC,GAASC,EAAAA,EAAAA,MAET,MAAEC,EAAK,QAAEC,EAAO,MAAEC,IAAUC,EAAAA,EAAAA,IAASC,UAKvC,IAAIC,EAAW,GAoBf,OAnBIX,IAEFW,EAAWX,GAETI,IAEFO,EAAWP,EAAOA,OAAOQ,SAASC,KAG9BT,EAAOA,OAAOU,MAAQV,EAAOA,OAAOU,KAAKC,QAAgD,iBAA/BX,EAAOA,OAAOU,KAAKC,SAC/EJ,EAAWP,EAAOA,OAAOU,KAAKC,QAI5BX,EAAOA,OAAOQ,SAASI,aAAelB,KAA0BM,EAAOA,OAAOQ,SAASI,cACzFL,EAAWP,EAAOA,OAAOQ,SAASI,YAAYlB,KAIjC,KAAba,EACK,mCAIgBM,MACvB,GAAGhB,EAAOiB,UAAU,0DACpB,CACEC,QAAS,CACP,OAAU,mBACV,eAAgB,oBAElBC,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CAACZ,SAAUA,MAElCa,OAAMC,GAAKA,IACXC,MAAKC,GAAQA,EAAKC,QAED,GAClB,IAEL,OAAIrB,GACK,SAACsB,EAAAA,GAAQA,CAAAA,GAEdrB,GACK,SAACsB,EAAAA,GAAkBA,CAACtB,MAAOA,IAE/BF,EAWgB,iBAAVA,GAEP,SAACnC,EAAAA,CACCG,QAASgC,EACTjC,YAAa4B,EAAOiB,UAAU,sBAMlC,SAAC/C,EAAAA,CACCC,UAAWkC,EACXjC,YAAa4B,EAAOiB,UAAU,sBArB9B,SAACY,EAAAA,GAAkBA,CACjBtB,MAAO,CACLK,KAAM,MACNvC,QAAS,Q,gICtKZ,MAAMyD,GAAeC,EAAAA,EAAAA,gBAAe,CACzCC,GAAI,YCIOC,GAAeC,EAAAA,EAAAA,cAAa,CACvCF,GAAI,UACJG,OAAQ,CACNC,KAAMN,KAIGO,EAAaJ,EAAaK,SACrCC,EAAAA,EAAAA,yBAAwB,CACtB3B,KAAM,aACN4B,UAAW,IACT,gCAAuCf,MAAKgB,GAAKA,EAAEC,kBAErDC,WAAYb,K","sources":["webpack://plugin-web-rca/./src/components/WebRCAFetchComponent/WebRCAFetchComponent.tsx","webpack://plugin-web-rca/./src/routes.ts","webpack://plugin-web-rca/./src/plugin.ts"],"sourcesContent":["import React from 'react';\nimport {\n  Table,\n  TableColumn,\n  Progress,\n  ResponseErrorPanel,\n} from '@backstage/core-components';\nimport useAsync from 'react-use/lib/useAsync';\nimport { useApi, configApiRef /*, identityApiRef*/ } from '@backstage/core-plugin-api';\nimport '@backstage/plugin-user-settings';\nimport { Typography } from '@material-ui/core';\nimport { InfoCard } from '@backstage/core-components';\nimport { useEntity } from '@backstage/plugin-catalog-react';\n\ninterface DenseTableProps {\n  incidents?: IncidentList;\n  web_rca_url?: string;\n  message?: string;\n}\n\ninterface Incident {\n  id?: string;\n  kind?: string;\n  href?: string;\n  incident_id?: string;\n  summary?: string;\n  description?: string;\n}\n// jq '{kind, page, size, total, items: [.items[] | {id, kind, href, incident_id, summary, description}]}'\ninterface IncidentList {\n  kind: 'IncidentList';\n  page?: number;\n  size?: number;\n  total?: number;\n  items?: Incident[];\n  errorMsg?: string;\n}\n\ninterface FetchProps {\n  product?: string;\n}\n\nexport const DenseTable = ({\n  incidents,\n  web_rca_url,\n  message,\n}: DenseTableProps) => {\n  if (message) {\n    return (\n      <InfoCard title=\"Web RCA Incidents\">\n        <Typography variant=\"body1\">{\"Error fetching incidents: \" + message }</Typography>\n      </InfoCard>\n    );\n  }\n\n  if (!incidents || !incidents.items || incidents.items.length === 0) {\n    return (\n      <InfoCard title=\"Web RCA Incidents\">\n        <Typography variant=\"body1\">\"Error fetching incidents: No Incidents\"</Typography>\n      </InfoCard>\n    );\n  }\n\n  if (!incidents || !incidents.items || incidents.items.length === 0) {\n    return (\n      <InfoCard title=\"Web RCA Incidents\">\n        <Typography variant=\"body1\">{\"Error fetching incidents: \" + message }</Typography>\n      </InfoCard>\n    );\n  }\n\n\n  const columns: TableColumn[] = [\n    { title: 'ID', field: 'incident_id' },\n    { title: 'Summary', field: 'summary' },\n    { title: 'Description', field: 'description' },\n  ];\n\n  const data = incidents.items.map(inc => {\n    return {\n      incident_id: (\n        <a\n          target=\"_blank\"\n          rel=\"noreferrer\"\n          href={`${web_rca_url}/incident/${inc.incident_id}/details`}\n        >\n          {inc.incident_id}\n        </a>\n      ),\n      summary: inc.summary,\n      description: inc.description,\n    };\n  });\n\n  return (\n    <Table\n      title=\"Web RCA Incidents\"\n      options={{ search: true, paging: true, pageSize: 10 }}\n      columns={columns}\n      data={data}\n    />\n  );\n};\n\nconst PRODUCT_ANNOTATION_KEY = 'web-rca/product-name';\n\nexport const WebRCAFetchComponent = ({ product }: FetchProps) => {\n  const config = useApi(configApiRef);\n  // const user = useApi(identityApiRef);\n  const entity = useEntity();\n\n  const { value, loading, error } = useAsync(async (): Promise<\n    IncidentList | string\n  > => {\n      // TODO: Should we limit to owner/mine?\n\n      let products = '';\n      if (product) {\n        // Product name can be passed in when used from page component\n        products = product;\n      }\n      if (entity) {\n        // Default to entity name\n        products = entity.entity.metadata.name;\n\n        // Overwrite name with system, if it exists\n        if (entity.entity.spec && entity.entity.spec.system && typeof(entity.entity.spec.system) === 'string') {\n          products = entity.entity.spec.system;\n        }\n\n        // Overwrite name with custom annotation, if it exists\n        if (entity.entity.metadata.annotations && PRODUCT_ANNOTATION_KEY in entity.entity.metadata.annotations) {\n          products = entity.entity.metadata.annotations[PRODUCT_ANNOTATION_KEY];\n        }\n      }\n\n      if (products === '') {\n        return 'No product based on entity';\n      }\n\n\n      let incidentList = await fetch(\n        `${config.getString('backend.baseUrl')}/api/plugin-web-rca-backend/incidents`,\n        {\n          headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json',\n          },\n          method: 'POST',\n          body: JSON.stringify({products: products}),\n        },\n      ).catch(e => e)\n       .then(resp => resp.json());\n\n      return incidentList as Promise<IncidentList>;\n    }, []);\n\n  if (loading) {\n    return <Progress />;\n  }\n  if (error) {\n    return <ResponseErrorPanel error={error} />;\n  }\n  if (!value) {\n    return (\n      <ResponseErrorPanel\n        error={{\n          name: 'Foo',\n          message: 'Foo',\n        }}\n      />\n    );\n  }\n\n  if (typeof value === 'string') {\n    return (\n      <DenseTable\n        message={value}\n        web_rca_url={config.getString('ocm.webRcaUIUrl')}\n      />\n    );\n  }\n\n  return (\n    <DenseTable\n      incidents={value}\n      web_rca_url={config.getString('ocm.webRcaUIUrl')}\n    />\n  );\n};\n","import { createRouteRef } from '@backstage/core-plugin-api';\n\nexport const rootRouteRef = createRouteRef({\n  id: 'web-rca',\n});\n","import {\n  createPlugin,\n  createRoutableExtension,\n} from '@backstage/core-plugin-api';\n\nimport { rootRouteRef } from './routes';\n\nexport const webRcaPlugin = createPlugin({\n  id: 'web-rca',\n  routes: {\n    root: rootRouteRef,\n  },\n});\n\nexport const WebRcaPage = webRcaPlugin.provide(\n  createRoutableExtension({\n    name: 'WebRcaPage',\n    component: () =>\n      import('./components/WebRCAComponent').then(m => m.WebRCAComponent),\n    // import('./components/WebRCAFetchComponent').then(m => m.WebRCAFetchComponent),\n    mountPoint: rootRouteRef,\n  }),\n);\n"],"names":["DenseTable","incidents","web_rca_url","message","InfoCard","title","Typography","variant","items","length","data","map","inc","incident_id","a","target","rel","href","summary","description","Table","options","search","paging","pageSize","columns","field","PRODUCT_ANNOTATION_KEY","WebRCAFetchComponent","product","config","useApi","configApiRef","entity","useEntity","value","loading","error","useAsync","async","products","metadata","name","spec","system","annotations","fetch","getString","headers","method","body","JSON","stringify","catch","e","then","resp","json","Progress","ResponseErrorPanel","rootRouteRef","createRouteRef","id","webRcaPlugin","createPlugin","routes","root","WebRcaPage","provide","createRoutableExtension","component","m","WebRCAComponent","mountPoint"],"sourceRoot":""}