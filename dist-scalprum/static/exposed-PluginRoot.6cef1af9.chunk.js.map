{"version":3,"file":"static/exposed-PluginRoot.6cef1af9.chunk.js","mappings":"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","sources":["webpack://plugin-web-rca/./src/components/WebRCAFetchComponent/WebRCAFetchComponent.tsx","webpack://plugin-web-rca/./src/routes.ts","webpack://plugin-web-rca/./src/plugin.ts"],"sourcesContent":["import React from 'react';\nimport {\n  Table,\n  TableColumn,\n  Progress,\n  ResponseErrorPanel,\n} from '@backstage/core-components';\nimport useAsync from 'react-use/lib/useAsync';\nimport { useApi, configApiRef, identityApiRef } from '@backstage/core-plugin-api';\nimport '@backstage/plugin-user-settings';\nimport { Typography } from '@material-ui/core';\nimport { InfoCard } from '@backstage/core-components';\nimport { useEntity } from '@backstage/plugin-catalog-react';\nimport local_incidents from './data.json';\n\ninterface DenseTableProps {\n  incidents?: IncidentList;\n  web_rca_url?: string;\n  message?: string;\n}\n\ninterface Incident {\n  id?: string;\n  kind?: string;\n  href?: string;\n  incident_id?: string;\n  summary?: string;\n  description?: string;\n}\n// jq '{kind, page, size, total, items: [.items[] | {id, kind, href, incident_id, summary, description}]}'\ninterface IncidentList {\n  kind: string;\n  //kind: 'IncidentList';\n  page?: number;\n  size?: number;\n  total?: number;\n  items?: Incident[];\n  errorMsg?: string;\n}\n\ninterface product {\n  id: string;\n  kind: string;\n  href: string;\n  name: string;\n  fullname: string;\n}\n\ninterface productList {\n  items: product[];\n}\n\ninterface FetchProps {\n  product?: string;\n}\n\nexport const DenseTable = ({\n  incidents,\n  web_rca_url,\n  message,\n}: DenseTableProps) => {\n  /*\n  if (message) {\n    return (\n      <InfoCard title=\"Error fetching incidents\">\n        <Typography variant=\"body1\">{message}</Typography>\n      </InfoCard>\n    );\n  }\n\n  if (!incidents || !incidents.items || incidents.items.length === 0) {\n    return (\n      <InfoCard title=\"Error fetching incidents\">\n        <Typography variant=\"body1\">\"No Incidents\"</Typography>\n      </InfoCard>\n    );\n  }\n  */\n\n  if (message || !incidents || !incidents.items || incidents.items.length === 0) {\n    incidents = local_incidents;\n  }\n  if (!incidents || !incidents.items || incidents.items.length === 0) {\n    return (\n      <InfoCard title=\"Error fetching incidents\">\n        <Typography variant=\"body1\">{message}</Typography>\n      </InfoCard>\n    );\n  }\n\n\n  const columns: TableColumn[] = [\n    { title: 'ID', field: 'incident_id' },\n    { title: 'Summary', field: 'summary' },\n    { title: 'Description', field: 'description' },\n  ];\n\n  const data = incidents.items.map(inc => {\n    return {\n      incident_id: (\n        <a\n          target=\"_blank\"\n          rel=\"noreferrer\"\n          href={`${web_rca_url}/incident/${inc.incident_id}/events`}\n        >\n          {inc.incident_id}\n        </a>\n      ),\n      summary: inc.summary,\n      description: inc.description,\n    };\n  });\n\n  return (\n    <Table\n      title=\"Incidents\"\n      options={{ search: true, paging: true, pageSize: 10 }}\n      columns={columns}\n      data={data}\n    />\n  );\n};\n\nasync function refresh(url: string, refresh_token: string) {\n  // @REF [URL Encoded form body](https://stackoverflow.com/questions/35325370/how-do-i-post-a-x-www-form-urlencoded-request-using-fetch/37562814#37562814)\n  const details: { [index: string]: string } = {\n    grant_type: 'refresh_token',\n    client_id: 'cloud-services',\n    refresh_token: `${refresh_token}`,\n  };\n\n  const formBody = [];\n  for (const property in details) {\n    if (Object.prototype.hasOwnProperty.call(details, property)) {\n      const encodedKey: string = encodeURIComponent(property);\n      const encodedValue: string = encodeURIComponent(details[property]);\n      formBody.push(`${encodedKey}=${encodedValue}`);\n    }\n  }\n  const formBodyString = formBody.join('&');\n\n  return await fetch(\n    `${url}/api/proxy/sso-redhat/auth/realms/redhat-external/protocol/openid-connect/token`,\n    {\n      method: 'POST',\n      body: formBodyString,\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n      },\n    },\n  )\n    .catch(error => error)\n    .then(resp => resp.json());\n}\n\nasync function lookupProduct(\n  url: string,\n  access_token: string,\n  product_name: string,\n): Promise<productList> {\n  return (await fetch(\n    `${url}/api/proxy/status-board/products?search=fullname+ilike+'${product_name}'`,\n    {\n      headers: {\n        Authorization: `Bearer ${access_token}`,\n      },\n    },\n  )\n    .catch(error => error)\n    .then(resp => resp.json())) as productList;\n}\n\nexport const WebRCAFetchComponent = ({ product }: FetchProps) => {\n  const config = useApi(configApiRef);\n  const user = useApi(identityApiRef);\n  const entity = useEntity();\n\n  const { value, loading, error } = useAsync(async (): Promise<\n    IncidentList | string\n  > => {\n      const profile_info = await user.getProfileInfo().then((pi) => {\n        return pi;\n      })\n      console.log(profile_info);\n      const backstage_identity = await user.getBackstageIdentity().then((bi) => {\n        return bi;\n      })\n      console.log(backstage_identity);\n      const refresh_token = await user.getCredentials().then((creds) => {\n        console.log(creds);\n        console.log(creds.token);\n        return creds.token;\n      });\n      if (refresh_token === undefined) {\n        return 'Invalid token';\n      }\n      console.log(refresh_token);\n      let token;\n      try {\n        token = await refresh(\n          config.getString('backend.baseUrl'),\n          refresh_token,\n        );\n      } catch (e) {\n        console.log(\"Error: \", e);\n        return 'Invalid token';\n      }\n      console.log(\"Token: \", token);\n      if (token.error) {\n        return token.error_description;\n      }\n\n      let products = '';\n      if (product) {\n        const p = await lookupProduct(\n          config.getString('backend.baseUrl'),\n          token.access_token,\n          product,\n        );\n        if (p.items && p.items.length > 0) {\n          products = `?product_id=${p.items[0].id}`;\n        }\n      }\n      if (entity) {\n        const p = await lookupProduct(\n          config.getString('backend.baseUrl'),\n          token.access_token,\n          entity.entity.metadata.name,\n        );\n        if (p.items.length > 0) {\n          products = `?product_id=${p.items[0].id}`;\n        }\n      }\n\n      if (products === '') {\n        return 'No product based on entity';\n      }\n\n      // TODO: Filter by status?  Add a toggle?\n      const incidentList = fetch(\n        `${config.getString('backend.baseUrl')}/api/proxy/web-rca/incidents${products}`,\n        {\n          headers: {\n            Authorization: `Bearer ${token.access_token}`,\n          },\n        },\n      )\n      .then(resp => resp.json())\n      .catch(e => e);\n\n      return incidentList as Promise<IncidentList>;\n    }, []);\n\n  if (loading) {\n    return <Progress />;\n  }\n  if (error) {\n    return <ResponseErrorPanel error={error} />;\n  }\n  if (!value) {\n    return (\n      <ResponseErrorPanel\n        error={{\n          name: 'Foo',\n          message: 'Foo',\n        }}\n      />\n    );\n  }\n\n  if (typeof value === 'string') {\n    return (\n      <DenseTable\n        message={value}\n        web_rca_url={config.getString('ocm.web-rca-url')}\n      />\n    );\n  }\n\n  return (\n    <DenseTable\n      incidents={value}\n      web_rca_url={config.getString('ocm.web-rca-url')}\n    />\n  );\n};\n","import { createRouteRef } from '@backstage/core-plugin-api';\n\nexport const rootRouteRef = createRouteRef({\n  id: 'web-rca',\n});\n","import {\n  createPlugin,\n  createRoutableExtension,\n} from '@backstage/core-plugin-api';\n\nimport { rootRouteRef } from './routes';\n\nexport const webRcaPlugin = createPlugin({\n  id: 'web-rca',\n  routes: {\n    root: rootRouteRef,\n  },\n});\n\nexport const WebRcaPage = webRcaPlugin.provide(\n  createRoutableExtension({\n    name: 'WebRcaPage',\n    component: () =>\n      import('./components/WebRCAComponent').then(m => m.WebRCAComponent),\n    // import('./components/WebRCAFetchComponent').then(m => m.WebRCAFetchComponent),\n    mountPoint: rootRouteRef,\n  }),\n);\n"],"names":["DenseTable","incidents","web_rca_url","message","items","length","local_incidents","InfoCard","title","Typography","variant","data","map","inc","incident_id","a","target","rel","href","summary","description","Table","options","search","paging","pageSize","columns","field","async","lookupProduct","url","access_token","product_name","fetch","headers","Authorization","catch","error","then","resp","json","WebRCAFetchComponent","product","config","useApi","configApiRef","user","identityApiRef","entity","useEntity","value","loading","useAsync","profile_info","getProfileInfo","pi","console","log","backstage_identity","getBackstageIdentity","bi","refresh_token","getCredentials","creds","token","undefined","details","grant_type","client_id","formBody","property","Object","prototype","hasOwnProperty","call","encodedKey","encodeURIComponent","encodedValue","push","formBodyString","join","method","body","refresh","getString","e","error_description","products","p","id","metadata","name","Progress","ResponseErrorPanel","rootRouteRef","createRouteRef","webRcaPlugin","createPlugin","routes","root","WebRcaPage","provide","createRoutableExtension","component","m","WebRCAComponent","mountPoint"],"sourceRoot":""}