{"version":3,"file":"plugin-3abcb14e.cjs.js","sources":["../../src/service/router.ts","../../src/plugin.ts"],"sourcesContent":["import { errorHandler } from '@backstage/backend-common';\nimport { LoggerService } from '@backstage/backend-plugin-api';\nimport { Config } from '@backstage/config';\nimport express from 'express';\nimport Router from 'express-promise-router';\n// import { useApi, configApiRef } from '@backstage/core-plugin-api';\n// import { Logger } from 'winston';\n\nexport interface RouterOptions {\n  logger: LoggerService;\n  config: Config;\n}\n\nexport async function createRouter(\n  options: RouterOptions,\n): Promise<express.Router> {\n  const { logger, config } = options;\n\n  // const config = useApi(configApiRef);\n\n  const router = Router();\n  router.use(express.json());\n\n  router.get('/health', (_, response) => {\n    logger.info('PONG!');\n    response.json({ status: 'ok' });\n  });\n\n  router.post('/incidents', async (req, response) => {\n    logger.info('incidents!');\n    logger.info(config.get('ocm'));\n    response.setHeader('Content-Type', 'application/json');\n    logger.info('Body: ', req.body);\n\n    let default_token = await refresh(\n      config.getString('backend.baseUrl'),\n      config.getString('ocm.clientId'),\n      config.getString('ocm.clientSecret'),\n    ).catch((e) => {\n      logger.error(\"Error: \", e);\n      response.status(500);\n      response.json({error: e})\n      return \"Invalid token\";\n    }\n    ).then((token) => {\n      if (token.error) {\n        logger.error(\"Error: \", token.error);\n        response.status(400);\n        response.json({error: token.error})\n        return 'Invalid token'\n      } else {\n        logger.info(\"Token: \", token);\n        return token.access_token;\n      }\n    });\n\n\n    let products = '';\n    let product_list = await lookupProduct(config.getString('backend.baseUrl'), default_token, req.body.products);\n    if (product_list && product_list.items && product_list.items.length > 0) {\n      products = `?product_id=${product_list.items[0].id}`;\n    }\n\n    if (products === '') {\n        const msg = 'No product based on entity';\n\n        response.status(400);\n        response.json({error: msg})\n\n        return;\n    }\n\n    let incident_list = await fetch(\n      `${config.getString('backend.baseUrl')}/api/proxy/web-rca/incidents${products}`,\n      {\n        headers: {\n          Authorization: `Bearer ${default_token}`,\n        }\n      }\n    ).catch(e => e)\n    .then(resp => resp.json())\n\n    try {\n      let parsed_incident_list: IncidentList = JSON.parse(incident_list);\n\n      response.status(200);\n      response.json(parsed_incident_list);\n    } catch (e) {\n      response.status(400);\n      response.json({error: e});\n    }\n  });\n  router.use(errorHandler());\n  return router;\n}\n\ninterface product {\n  id: string;\n  kind: string;\n  href: string;\n  name: string;\n  fullname: string;\n}\n\ninterface productList {\n  items: product[];\n}\n\ninterface Incident {\n  id?: string;\n  kind?: string;\n  href?: string;\n  incident_id?: string;\n  summary?: string;\n  description?: string;\n}\n// jq '{kind, page, size, total, items: [.items[] | {id, kind, href, incident_id, summary, description}]}'\ninterface IncidentList {\n  kind: 'IncidentList';\n  page?: number;\n  size?: number;\n  total?: number;\n  items?: Incident[];\n  errorMsg?: string;\n}\n\n\nasync function refresh(url: string, client_id: string, client_secret: string) {\n  // @REF [URL Encoded form body](https://stackoverflow.com/questions/35325370/how-do-i-post-a-x-www-form-urlencoded-request-using-fetch/37562814#37562814)\n  const details: { [index: string]: string } = {\n    grant_type: 'client_credentials',\n    client_id: client_id,\n    client_secret: client_secret,\n    scope: 'openid api.ocm',\n  };\n\n  const formBody = [];\n  for (const property in details) {\n    if (Object.prototype.hasOwnProperty.call(details, property)) {\n      const encodedKey: string = encodeURIComponent(property);\n      const encodedValue: string = encodeURIComponent(details[property]);\n      formBody.push(`${encodedKey}=${encodedValue}`);\n    }\n  }\n  const formBodyString = formBody.join('&');\n\n  return await fetch(\n    `${url}/api/proxy/sso-redhat/auth/realms/redhat-external/protocol/openid-connect/token`,\n    {\n      method: 'POST',\n      body: formBodyString,\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n      },\n    },\n  )\n    .catch(error => error)\n    .then(resp => resp.json());\n}\n\nasync function lookupProduct(\n  url: string,\n  access_token: string,\n  product_name: string,\n): Promise<productList> {\n  return (await fetch(\n    `${url}/api/proxy/status-board/products?search=fullname+ilike+'${product_name}'`,\n    {\n      headers: {\n        Authorization: `Bearer ${access_token}`,\n      },\n    },\n  )\n    .catch(error => error)\n    .then(resp => resp.json())) as productList;\n}\n","// import { loggerToWinstonLogger } from '@backstage/backend-common';\nimport { coreServices, createBackendPlugin } from '@backstage/backend-plugin-api';\n\nimport { createRouter } from './service/router';\n\n/**\n * The web-rca-backend backend plugin.\n *\n * @alpha\n */\nexport const web_rca_backendPlugin = createBackendPlugin({\n  pluginId: 'plugin-web-rca-backend',\n  register(env) {\n    env.registerInit({\n      deps: {\n        logger: coreServices.logger,\n        config: coreServices.rootConfig,\n        httpRouter: coreServices.httpRouter,\n      },\n      async init({ config, logger, httpRouter }) {\n        // http.use(() => createRouter({...config, logger: loggerToWinstonLogger(logger)}));\n        httpRouter.use(\n          await createRouter({\n            logger,\n            config,\n          }),\n        );\n        httpRouter.addAuthPolicy({\n          path: '/health',\n          allow: 'unauthenticated',\n        });\n        httpRouter.addAuthPolicy({\n          path: '/incidents',\n          allow: 'unauthenticated',\n        });\n      },\n    });\n  },\n});\n"],"names":["Router","express","errorHandler","createBackendPlugin","coreServices"],"mappings":"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"}